const sharp = require('sharp');
const fs = require('fs');
const path = require('path');

// Android icon sizes
const androidSizes = {
  'mipmap-mdpi': 48,
  'mipmap-hdpi': 72,
  'mipmap-xhdpi': 96,
  'mipmap-xxhdpi': 144,
  'mipmap-xxxhdpi': 192
};

// iOS icon sizes
const iosSizes = {
  'icon-20@2x': 40,
  'icon-20@3x': 60,
  'icon-29@2x': 58,
  'icon-29@3x': 87,
  'icon-40@2x': 80,
  'icon-40@3x': 120,
  'icon-60@2x': 120,
  'icon-60@3x': 180,
  'icon-76': 76,
  'icon-76@2x': 152,
  'icon-83.5@2x': 167,
  'icon-1024': 1024
};

async function generateIcons(inputPath, outputBase) {
  // Ensure base directories exist
  const androidBase = path.join(outputBase, 'android');
  const iosBase = path.join(outputBase, 'ios');
  fs.mkdirSync(androidBase, { recursive: true });
  fs.mkdirSync(iosBase, { recursive: true });

  // Generate Android icons
  for (const [folder, size] of Object.entries(androidSizes)) {
    const outputDir = path.join(androidBase, folder);
    fs.mkdirSync(outputDir, { recursive: true });

    await sharp(inputPath)
      .resize(size, size)
      .toFile(path.join(outputDir, 'ic_launcher.png'));

    // Generate round icon
    await sharp(inputPath)
      .resize(size, size)
      .composite([{
        input: Buffer.from(`<svg><circle cx="${size/2}" cy="${size/2}" r="${size/2}" /></svg>`),
        blend: 'dest-in'
      }])
      .toFile(path.join(outputDir, 'ic_launcher_round.png'));
  }

  const drawableDir = path.join(androidBase, 'drawable');
    fs.mkdirSync(drawableDir, { recursive: true });

  // Generate notification icon (white with transparency)
  await sharp(inputPath)
    .resize(24, 24)
    .threshold(128)
    .negate()
    .toFile(path.join(androidBase, 'drawable', 'ic_notification.png'));

  // Generate iOS icons
  for (const [name, size] of Object.entries(iosSizes)) {
    await sharp(inputPath)
      .resize(size, size)
      .toFile(path.join(iosBase, `${name}.png`));
  }

  // Generate iOS Contents.json
  const iosContents = {
    images: Object.entries(iosSizes).map(([name, size]) => ({
      filename: `${name}.png`,
      idiom: 'iphone',
      scale: name.includes('@') ? name.split('@')[1].replace('x', '') : '1x',
      size: `${size}x${size}`
    })),
    info: {
      version: 1,
      author: 'Generated by script'
    }
  };

  fs.writeFileSync(
    path.join(iosBase, 'Contents.json'),
    JSON.stringify(iosContents, null, 2)
  );
}

// Usage
generateIcons('logo.jpg', '.')
  .then(() => console.log('Icons generated successfully'))
  .catch(console.error);